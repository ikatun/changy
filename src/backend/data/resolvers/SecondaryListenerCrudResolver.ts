/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length
import * as cleanDeep from 'clean-deep';
import { Arg, Args, Ctx, FieldResolver, ID, Info, Int, Mutation, Query, Resolver, Root } from 'type-graphql';

import { addEagerFlags } from '../../utils/add-eager-flags';
import * as auth from '../../utils/auth/auth-checkers';
import { getFindOptions } from '../../utils/get-find-options';
import { resolveGetters } from '../../utils/resolve-getters';
import { EntityId, EntityIdScalar } from '../EntityId';
import { SecondaryListenerCreateInput } from '../inputs/SecondaryListenerCreateInput';
import { SecondaryListenerEditInput } from '../inputs/SecondaryListenerEditInput';
import { SecondaryListenerSearchInput } from '../inputs/SecondaryListenerSearchInput';
import { SecondaryListenerSearchOrderInput } from '../inputs/SecondaryListenerSearchOrderInput';
import { IRequestContext } from '../IRequestContext';
import { SecondaryListener } from '../models/SecondaryListener';
import { PaginatedResponse } from '../PaginationResponse';

// <keep-imports>
// </keep-imports>

const PaginatedSecondaryListenerResponse = PaginatedResponse(SecondaryListener);

@Resolver(SecondaryListener)
export class SecondaryListenerCrudResolver {
  @Query(() => SecondaryListener)
  public async secondaryListener(@Arg('id', () => EntityIdScalar) id: number, @Info() info, @Ctx() ctx: IRequestContext) {
    return addEagerFlags(await ctx.em.findOneOrFail(SecondaryListener, id, getFindOptions(SecondaryListener, info)));
  }

  @Query(() => PaginatedSecondaryListenerResponse)
  public async searchSecondaryListeners(
    @Arg('search', () => SecondaryListenerSearchInput, { nullable: true }) search: SecondaryListenerSearchInput | null = null,
    @Arg('skip', () => Int, { nullable: true }) skip: number = 0,
    @Arg('take', () => Int, { nullable: true }) take: number = 25,
    @Arg('order', () => [SecondaryListenerSearchOrderInput], { nullable: true }) order: Array<SecondaryListenerSearchOrderInput> = [],
    @Info() info,
    @Ctx() ctx: IRequestContext,
  ) {
    const defaultFindOptions = getFindOptions(SecondaryListener, info, { transformQueryPath: x => x.replace(/^items./, '') });

    const [items, total] = addEagerFlags(await ctx.em.findAndCount(SecondaryListener, cleanDeep({
      ...defaultFindOptions,
      skip,
      take,
      where: resolveGetters(search),
      order: Object.assign({}, ...order),
    })));

    return {
      items,
      total,
      hasMore: skip + take < total,
    };
  }

  @Query(() => [SecondaryListener])
  public async secondaryListeners(@Info() info, @Ctx() ctx: IRequestContext) {
    return addEagerFlags(await ctx.em.find(SecondaryListener, getFindOptions(SecondaryListener, info)));
  }

  @Mutation(() => SecondaryListener)
  public async createSecondaryListener(@Arg('input') input: SecondaryListenerCreateInput, @Ctx() ctx: IRequestContext): Promise<SecondaryListener> {
    const model = new SecondaryListener();
    await model.update(input, ctx);

    await ctx.em.save(ctx.modelsToSave);

    return model;
  }

  @Mutation(() => SecondaryListener)
  public async updateSecondaryListener(@Arg('input') input: SecondaryListenerEditInput, @Ctx() ctx: IRequestContext) {
    const model = await ctx.em.findOneOrFail(SecondaryListener, input.id);
    await model.update(input, ctx);

    // <keep-update-code>
    // </keep-update-code>

    await ctx.em.save(ctx.modelsToSave);

    return model;
  }

  @Mutation(() => Boolean)
  public async deleteSecondaryListeners(@Arg('ids', () => [ID]) ids: Array<EntityId>, @Ctx() ctx: IRequestContext): Promise<boolean> {
    const entities = await ctx.em.findByIds(SecondaryListener, ids);
    await auth.assertCanDelete(entities, ctx);
    await ctx.em.remove(entities);

    return true;
  }

  // <keep-methods>
  // </keep-methods>
}
