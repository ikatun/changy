/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length no-duplicate-imports
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';

import { Source } from './Source';

import { asPromise } from '../../utils/as-promise';
import * as auth from '../../utils/auth/auth-checkers';
import { IAuthorizable } from '../../utils/auth/IAuthorizable';
import { getInputOperationType } from '../../utils/get-input-operation-type';
import { noChange } from '../../utils/no-change';
import { PrimaryListenerAuth } from '../auth/PrimaryListenerAuth';
import { EntityId, EntityIdScalar } from '../EntityId';
import { PrimaryListenerCreateInput } from '../inputs/PrimaryListenerCreateInput';
import { PrimaryListenerEditInput } from '../inputs/PrimaryListenerEditInput';
import { PrimaryListenerNestedInput } from '../inputs/PrimaryListenerNestedInput';
import { IRequestContext } from '../IRequestContext';
import { updateSourceRelation } from './update-operations/primaryListener-update-operations';

// <keep-imports>
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class PrimaryListener implements IAuthorizable {
  @Field(() => EntityIdScalar)
  @PrimaryGeneratedColumn()
  public id: EntityId;

  public authorizationChecker = new PrimaryListenerAuth(this);

  @Field(() => String)
  @Column({type: 'text',
    // <custom-column-args>
    // </custom-column-args>
  })
  public url: string;

  @Column({nullable: true, type: 'text',
    // <custom-column-args>
    // </custom-column-args>
  })
  public requestConfig?: string | null;

  @OneToOne(() => Source, (source) => source.primaryListener , { nullable: false, onDelete: 'CASCADE' })
  @Field(() => Source , { nullable: false })
  @JoinColumn()
  public source: Promise<Source>;

  @CreateDateColumn()
  @Field()
  public createdAt: Date;

  @UpdateDateColumn()
  @Field()
  public updatedAt: Date;

  public async update(input: PrimaryListenerCreateInput | PrimaryListenerEditInput | PrimaryListenerNestedInput, context: IRequestContext) {
    const { source, ...data } = input;
    if (noChange(input)) {
      return this;
    }
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    await updateSourceRelation(this, source, context);

    context.modelsToSave.push(this);

    // <keep-update-code>
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  // </keep-methods>
}
