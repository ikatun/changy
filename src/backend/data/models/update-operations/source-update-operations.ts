/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length
import { asPromise } from '../../../utils/as-promise';
import { PrimaryListenerNestedInput } from '../../inputs/PrimaryListenerNestedInput';
import { IRequestContext } from '../../IRequestContext';
import { PrimaryListener } from '../PrimaryListener';
import { Source } from '../Source';

export async function updatePrimaryListenerRelation(source: Source, primaryListener: PrimaryListenerNestedInput | null | undefined, context: IRequestContext) {
  const existingPrimaryListener = await source.primaryListener;

  if (primaryListener === null) {
    source.primaryListener = Promise.resolve(null);
  } else if (primaryListener === undefined) {
    // do nothing
  } else if (primaryListener.id) {
    const primaryListenerModel = await context.em.findOneOrFail(PrimaryListener, primaryListener.id);
    source.primaryListener = asPromise(await primaryListenerModel.update(primaryListener, context));
  } else if (existingPrimaryListener) {
    await existingPrimaryListener.update(primaryListener, context);
  } else {
    source.primaryListener = asPromise(await new PrimaryListener().update(primaryListener, context));
  }
}
