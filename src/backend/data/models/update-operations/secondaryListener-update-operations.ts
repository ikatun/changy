/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length
import { asPromise } from '../../../utils/as-promise';
import { SourceNestedInput } from '../../inputs/SourceNestedInput';
import { IRequestContext } from '../../IRequestContext';
import { SecondaryListener } from '../SecondaryListener';
import { Source } from '../Source';

export async function updateSourceRelation(secondaryListener: SecondaryListener, source: SourceNestedInput | null | undefined, context: IRequestContext) {
  const existingSource = await secondaryListener.source;

  if (source === null) {
    secondaryListener.source = Promise.resolve(null);
  } else if (source === undefined) {
    // do nothing
  } else if (source.id) {
    const sourceModel = await context.em.findOneOrFail(Source, source.id);
    secondaryListener.source = asPromise(await sourceModel.update(source, context));
  } else if (existingSource) {
    await existingSource.update(source, context);
  } else {
    secondaryListener.source = asPromise(await new Source().update(source, context));
  }
}
