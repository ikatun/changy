/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length no-duplicate-imports
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';

import { PrimaryListener } from './PrimaryListener';
import { SecondaryListener } from './SecondaryListener';
import { User } from './User';

import { asPromise } from '../../utils/as-promise';
import * as auth from '../../utils/auth/auth-checkers';
import { IAuthorizable } from '../../utils/auth/IAuthorizable';
import { getInputOperationType } from '../../utils/get-input-operation-type';
import { noChange } from '../../utils/no-change';
import { SourceAuth } from '../auth/SourceAuth';
import { EntityId, EntityIdScalar } from '../EntityId';
import { SourceCreateInput } from '../inputs/SourceCreateInput';
import { SourceEditInput } from '../inputs/SourceEditInput';
import { SourceNestedInput } from '../inputs/SourceNestedInput';
import { IRequestContext } from '../IRequestContext';
import { updatePrimaryListenerRelation } from './update-operations/source-update-operations';

// <keep-imports>
import { fetchCache } from '../../services/fetch-cache';
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class Source implements IAuthorizable {
  @Field(() => EntityIdScalar)
  @PrimaryGeneratedColumn()
  public id: EntityId;

  public authorizationChecker = new SourceAuth(this);

  @Field(() => Number)
  @Column({type: 'integer',
    // <custom-column-args>
    // </custom-column-args>
  })
  public intervalSeconds: number;

  @Field(() => String)
  @Column({type: 'text',
    // <custom-column-args>
    // </custom-column-args>
  })
  public url: string;

  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public lastRefreshTime: Date;

  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public hash: string;

  @Column({nullable: true, type: 'text',
    // <custom-column-args>
    // </custom-column-args>
  })
  public requestConfig?: string | null;

  @ManyToOne(() => User, (user) => user.sources , { nullable: false, onDelete: 'CASCADE' })
  @Field(() => User , { nullable: false })
  public owner: Promise<User>;

  @OneToMany(() => SecondaryListener, (secondaryListener) => secondaryListener.source)
  @Field(() => [SecondaryListener])
  public secondaryListeners: Promise<Array<SecondaryListener>>;

  @OneToOne(() => PrimaryListener, (primaryListener) => primaryListener.source)
  @Field(() => PrimaryListener , { nullable: true })
  public primaryListener: Promise<PrimaryListener | undefined | null>;

  @CreateDateColumn()
  @Field()
  public createdAt: Date;

  @UpdateDateColumn()
  @Field()
  public updatedAt: Date;

  public async update(input: SourceCreateInput | SourceEditInput | SourceNestedInput, context: IRequestContext) {
    const { primaryListener, ...data } = input;
    if (noChange(input)) {
      return this;
    }
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    if (getInputOperationType(this, input) === 'create') {
      this.owner = asPromise(await this.owner || await context.user);
    }

    await updatePrimaryListenerRelation(this, primaryListener, context);

    context.modelsToSave.push(this);

    // <keep-update-code>
    if (!this.hash) {
      this.hash = await fetchCache(this.url, input.config);
      this.lastRefreshTime = new Date();
      this.requestConfig = JSON.stringify(input.config);
    }
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  // </keep-methods>
}
